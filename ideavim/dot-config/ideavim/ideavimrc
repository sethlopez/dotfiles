" You can find a list of options here: https://jb.gg/h38q75
" Find more configs here: https://jb.gg/share-ideavimrc

" LEADER
" =============================================================================
let mapleader = " "


" BASIC SETTINGS
" =============================================================================
" show the mode and command
set showmode
set showcmd
" display hybrid line numbers
set number
set relativenumber
" minimum lines to show above/below cursor
set scrolloff=10
" do case-insensitive searching
set ignorecase
" do case-sensitive searching if search contains capitals
set smartcase
" do incremental searching
set incsearch
" highlight search results
set hlsearch
" remove timeout
set notimeout


" IDEAVIM SETTINGS
" =============================================================================
" smart line concatenation
set ideajoin
" use the IDE's paste operation rather than a simple insertion
set ideaput
" use the IDE's bookmarks rather than vim's marks
set ideamarks


" ENABLE PLUGINS
" =============================================================================
" highlight yanks
set highlightedyank
" toggle commented lines
set commentary
" add/change/delete surroundings in pairs, e.g. (), {}, [], <>, "", ''
set surround
" display available keybindings in a popup
set which-key


" KEYBINDINGS
" =============================================================================
" no arrow keys!
nnoremap <Left>  :echo "Use h to move!"<cr>
nnoremap <Down>  :echo "Use j to move!"<cr>
nnoremap <Up>    :echo "Use k to move!"<cr>
nnoremap <Right> :echo "Use l to move!"<cr>
" vertically center the scrolled line on screen when half-paging up/down
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
" enable hlsearch when searching
nnoremap / :set hlsearch<cr>/
nnoremap ? :set hlsearch<cr>?
" escape clears hlsearch in normal mode
nnoremap <Esc> :set nohlsearch<cr>
" split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nmap <C-w>m <Action>(MoveEditorToOppositeTabGroup)
nmap <C-w>M <Action>(MaximizeEditorInSplit)
nmap <C-w>O <Action>(ChangeSplitOrientation)
nmap <C-w>u <Action>(Unsplit)
" use ]d and [d to navigate diagnostic messages
nmap [d <Action>(GotoPreviousError)
nmap ]d <Action>(GotoNextError)
" don't use Ex mode, use Q for formatting.
map Q gq

" show intention actions
nmap <leader>a <Action>(ShowIntentionActions)
" easier yanking of the whole file
nnoremap <leader>y :%y<cr>
nnoremap <leader>Y :%y+<cr>
" display modes
nmap <leader>df <Action>(ToggleDistractionFreeMode)
nmap <leader>dp <Action>(TogglePresentationMode)
" files
nmap <leader>fb <Action>(NewScratchBuffer)
nmap <leader>ff <Action>(GotoFile)
nmap <leader>fr <Action>(RecentFiles)
nmap <leader>fs <Action>(NewScratchFile)
" goto
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gt <Action>(GotoTypeDeclaration)
" project
nmap <leader>pr <Action>(Run)
nmap <leader>ps <Action>(Android.SyncProject)
" refactor
nmap <leader>rf <Action>(ReformatCode)
nmap <leader>rr <Action>(RenameElement)
nmap <leader>rs <Action>(ChangeSignature)
" ideavim
nmap <leader>R <Action>(IdeaVim.ReloadVimRc.reload)


" WHICH-KEY
" =============================================================================
" settings
let g:WhichKey_FontSize = 16
let g:WhichKey_SortCaseSensitive = "false"
" diagnostics
let g:WhichKeyDesc_Goto_GotoPreviousDiagnostic = "[d   Goto: Previous [D]iagnostic Message"
let g:WhichKeyDesc_Goto_GotoNextDiagnostic =     "]d   Goto: Next [D]iagnostic Message"
" window
let g:WhichKeyDesc_Window_MoveToSplitLeft =      "<C-w>h   Move to split left"
let g:WhichKeyDesc_Window_MoveToSplitDown =      "<C-w>j   Move to split below"
let g:WhichKeyDesc_Window_MoveToSplitUp =        "<C-w>k   Move to split above"
let g:WhichKeyDesc_Window_MoveToSplitRight =     "<C-w>l   Move to split right"
let g:WhichKeyDesc_Window_MoveEditor =           "<C-w>m   Move editor to opposite split"
let g:WhichKeyDesc_Window_MaximizeSplit =        "<C-w>M   Maximize split"
let g:WhichKeyDesc_Window_ChangeOrientation =    "<C-w>O   Change split orientation"
let g:WhichKeyDesc_Window_Unsplit =              "<C-w>u   Unsplit (Merge)"
" leader / root
let g:WhichKeyDesc_ShowIntentionActions =        "<leader>a   Show Intention [A]ctions"
let g:WhichKeyDesc_Reload =                      "<leader>R   [R]eload .ideavimrc"
" leader / display modes
let g:WhichKeyDesc_Display =                     "<leader>d   [D]isplay"
let g:WhichKeyDesc_Display_DistractionFreeMode = "<leader>df  [D]isplay: Distraction [F]ree Mode"
let g:WhichKeyDesc_Display_PresentationMode =    "<leader>dp  [D]isplay: [P]resentation Mode"
" leader / files
let g:WhichKeyDesc_Files =                       "<leader>f   [F]iles"
let g:WhichKeyDesc_Files_NewScratchBuffer =      "<leader>fb  [F]iles: New Scratch [B]uffer"
let g:WhichKeyDesc_Files_GotoFile =              "<leader>ff  [F]iles: Goto [F]ile"
let g:WhichKeyDesc_Files_RecentFiles =           "<leader>fr  [F]iles: Goto [R]ecent File"
let g:WhichKeyDesc_Files_NewScratchFile =        "<leader>fs  [F]iles: New [S]cratch File"
" leader / goto
let g:WhichKeyDesc_Goto =                        "<leader>g   [G]oto"
let g:WhichKeyDesc_Goto_GotoDeclaration =        "<leader>gd  [G]oto: [D]eclaration"
let g:WhichKeyDesc_Goto_GotoImplementation =     "<leader>gi  [G]oto: [I]mplementation"
let g:WhichKeyDesc_Goto_GotoTypeDeclaration =    "<leader>gt  [G]oto: [T]ype Declaration"
" leader / project
let g:WhichKeyDesc_Project_Run =                 "<leader>pr  [P]roject: [R]un"
let g:WhichKeyDesc_Project_Sync =                "<leader>ps  [P]roject: [S]ync"
" leader / refactor
let g:WhichKeyDesc_Refactor_ReformatCode =       "<leader>rf  [R]efactor: Re[f]ormat"
let g:WhichKeyDesc_Refactor_RenameElement =      "<leader>rr  [R]efactor: [R]ename"
let g:WhichKeyDesc_Refactor_ChangeSignature =    "<leader>rs  [R]efactor: Change [S]ignature"
