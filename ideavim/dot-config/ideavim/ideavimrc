" You can find a list of options here: https://jb.gg/h38q75
" Find more configs here: https://jb.gg/share-ideavimrc

" LEADER
" =============================================================================
let mapleader = " "


" BASIC SETTINGS
" =============================================================================
" show the mode and command
set showmode
set showcmd
" display hybrid line numbers
set number
set relativenumber
" minimum lines to show above/below cursor
set scrolloff=10
" do case-insensitive searching
set ignorecase
" do case-sensitive searching if search contains capitals
set smartcase
" do incremental searching
set incsearch
" highlight search results
set hlsearch
" remove timeout
set notimeout


" IDEAVIM SETTINGS
" =============================================================================
" smart line concatenation
set ideajoin
" use the IDE's paste operation rather than a simple insertion
set ideaput
" use the IDE's bookmarks rather than vim's marks
set ideamarks


" ENABLE PLUGINS
" =============================================================================
" highlight yanks
set highlightedyank
" toggle commented lines
set commentary
" add/change/delete surroundings in pairs, e.g. (), {}, [], <>, "", ''
set surround
" display available keybindings in a popup
set which-key


" KEYBINDINGS
" =============================================================================
" don't use Ex mode, use Q for formatting.
map Q gq
" no arrow keys!
nnoremap <Left>  :echo "Use h to move!"<CR>
nnoremap <Down>  :echo "Use j to move!"<CR>
nnoremap <Up>    :echo "Use k to move!"<CR>
nnoremap <Right> :echo "Use l to move!"<CR>
" vertically center the scrolled line on screen when half-paging up/down
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
" enable hlsearch when searching
nnoremap / :set hlsearch<CR>/
nnoremap ? :set hlsearch<CR>?
" escape clears hlsearch in normal mode
nnoremap <Esc> :set nohlsearch<CR>
" split navigation
nnoremap <C-h>  <C-w>h
nnoremap <C-j>  <C-w>j
nnoremap <C-k>  <C-w>k
nnoremap <C-l>  <C-w>l
nnoremap <C-w>m :action MoveEditorToOppositeTabGroup<CR>
nnoremap <C-w>M :action MaximizeEditorInSplit<CR>
nnoremap <C-w>O :action ChangeSplitOrientation<CR>
nnoremap <C-w>u :action Unsplit<CR>
" use ]d and [d to navigate diagnostic messages
nnoremap [d :action GotoPreviousError<CR>
nnoremap ]d :action GotoNextError<CR>

" easier yanking of the whole file
nnoremap <leader>y   :%y<CR>
nnoremap <leader>Y   :%y+<CR>
" display modes
nnoremap <leader>df  :action ToggleDistractionFreeMode<CR>
nnoremap <leader>dp  :action TogglePresentationMode<CR>
" files
nnoremap <leader>fb  :action NewScratchBuffer<CR>
nnoremap <leader>ff  :action GotoFile<CR>
nnoremap <leader>fr  :action RecentFiles<CR>
nnoremap <leader>fs  :action NewScratchFile<CR>
" goto
nnoremap <leader>gd  :action GotoDeclaration<CR>
nnoremap <leader>gg  :action FileStructurePopup<CR>
nnoremap <leader>gi  :action GotoImplementation<CR>
nnoremap <leader>gl  :action RecentLocations<CR>
nnoremap <leader>gs  :action GotoSuperMethod<CR>
nnoremap <leader>gt  :action GotoTest<CR>
nnoremap <leader>gy  :action GotoTypeDeclaration<CR>
" project
nnoremap <leader>pr  :action Run<CR>
nnoremap <leader>ps  :action Android.SyncProject<CR>
" show popups
nnoremap <leader>sa  :action ShowIntentionActions<CR>
nnoremap <leader>sh  :action ShowHoverInfo<CR>
nnoremap <leader>si  :action QuickImplementations<CR>
nnoremap <leader>st  :action QuickTypeDefinition<CR>
nnoremap <leader>su  :action ShowUsages<CR>
" refactor
nnoremap <leader>rf  :action ReformatCode<CR>
nnoremap <leader>rr  :action RenameElement<CR>
nnoremap <leader>rs  :action ChangeSignature<CR>
" ideavim
nnoremap <leader>R   :action IdeaVim.ReloadVimRc.reload<CR>


" WHICH-KEY
" =============================================================================
" settings
let g:WhichKey_DefaultDelay = 0
let g:WhichKey_FontSize = 16
let g:WhichKey_ProcessUnknownMappings = "false"
let g:WhichKey_SortCaseSensitive = "false"
" diagnostics
let g:WhichKeyDesc_Goto_GotoPreviousDiagnostic = "[d   Goto: Previous [D]iagnostic Message"
let g:WhichKeyDesc_Goto_GotoNextDiagnostic =     "]d   Goto: Next [D]iagnostic Message"
" window
let g:WhichKeyDesc_Window_MoveToSplitLeft =      "<C-w>h   Move to split left"
let g:WhichKeyDesc_Window_MoveToSplitDown =      "<C-w>j   Move to split below"
let g:WhichKeyDesc_Window_MoveToSplitUp =        "<C-w>k   Move to split above"
let g:WhichKeyDesc_Window_MoveToSplitRight =     "<C-w>l   Move to split right"
let g:WhichKeyDesc_Window_MoveEditor =           "<C-w>m   Move editor to opposite split"
let g:WhichKeyDesc_Window_MaximizeSplit =        "<C-w>M   Maximize split"
let g:WhichKeyDesc_Window_ChangeOrientation =    "<C-w>O   Change split orientation"
let g:WhichKeyDesc_Window_Unsplit =              "<C-w>u   Unsplit (Merge)"
" leader / root
let g:WhichKeyDesc_Reload =                      "<leader>R   [R]eload .ideavimrc"
let g:WhichKeyDesc_YankBuffer =                  "<leader>y   [Y]ank Buffer"
let g:WhichKeyDesc_YankBufferToClipboard =       "<leader>Y   [Y]ank Buffer To Clipboard"
" leader / display modes
let g:WhichKeyDesc_Display =                     "<leader>d   [D]isplay"
let g:WhichKeyDesc_Display_DistractionFreeMode = "<leader>df  [D]isplay: Distraction [F]ree Mode"
let g:WhichKeyDesc_Display_PresentationMode =    "<leader>dp  [D]isplay: [P]resentation Mode"
" leader / files
let g:WhichKeyDesc_Files =                       "<leader>f   [F]iles"
let g:WhichKeyDesc_Files_NewScratchBuffer =      "<leader>fb  [F]iles: New Scratch [B]uffer"
let g:WhichKeyDesc_Files_GotoFile =              "<leader>ff  [F]iles: Goto [F]ile"
let g:WhichKeyDesc_Files_RecentFiles =           "<leader>fr  [F]iles: Goto [R]ecent File"
let g:WhichKeyDesc_Files_NewScratchFile =        "<leader>fs  [F]iles: New [S]cratch File"
" leader / goto
let g:WhichKeyDesc_Goto =                        "<leader>g   [G]oto"
let g:WhichKeyDesc_Goto_Declaration =            "<leader>gd  [G]oto: [D]eclaration"
let g:WhichKeyDesc_Goto_FileStructure =          "<leader>gg  [G]oto: File Structure"
let g:WhichKeyDesc_Goto_Implementation =         "<leader>gi  [G]oto: [I]mplementation"
let g:WhichKeyDesc_Goto_RecentLocations =        "<leader>gl  [G]oto: Recent [L]ocations"
let g:WhichKeyDesc_Goto_SuperMethod =            "<leader>gs  [G]oto: [S]uper Method"
let g:WhichKeyDesc_Goto_Test =                   "<leader>gt  [G]oto: [T]est"
let g:WhichKeyDesc_Goto_TypeDeclaration =        "<leader>gy  [G]oto: T[y]pe Declaration"
" leader / project
let g:WhichKeyDesc_Project =                     "<leader>p   [P]roject"
let g:WhichKeyDesc_Project_Run =                 "<leader>pr  [P]roject: [R]un"
let g:WhichKeyDesc_Project_Sync =                "<leader>ps  [P]roject: [S]ync"
" leader / refactor
let g:WhichKeyDesc_Refactor =                    "<leader>r   [R]efactor"
let g:WhichKeyDesc_Refactor_ReformatCode =       "<leader>rf  [R]efactor: Re[f]ormat"
let g:WhichKeyDesc_Refactor_RenameElement =      "<leader>rr  [R]efactor: [R]ename"
let g:WhichKeyDesc_Refactor_ChangeSignature =    "<leader>rs  [R]efactor: Change [S]ignature"
" leader / show popups
let g:WhichKeyDesc_Show =                        "<leader>s   [S]how"
let g:WhichKeyDesc_Show_IntentionActions =       "<leader>sa  [S]how: Intention [A]ctions"
let g:WhichKeyDesc_Show_HoverInfo =              "<leader>sh  [S]how: [H]over Info"
let g:WhichKeyDesc_Show_Implementations =        "<leader>si  [S]how: [I]mplementations"
let g:WhichKeyDesc_Show_TypeDefinition =         "<leader>st  [S]how: [T]ype Definition"
let g:WhichKeyDesc_Show_Usages =                 "<leader>su  [S]how: [U]sages"
