#==============================================================================#
# prompt expansion documentation:                                              #
#     http://tinyurl.com/3zjthox                                               #
# color documentation:                                                         #
#     http://tinyurl.com/gw4e9a6                                               #
#==============================================================================#

#-- Git ------------------------------------------------------------------------

# appears before the branch name
__prompt__git_branch_name__prefix="%F{yellow}"
# appears after the branch name
__prompt__git_branch_name__suffix="%f"

function __prompt__git_branch_name {
  local branch_name

  branch_name="$branch_name$__prompt__git_branch_name__prefix"
  branch_name="$branch_name${$(git symbolic-ref --short -q HEAD 2>/dev/null):-'(detached)'}"
  branch_name="$branch_name$__prompt__git_branch_name__suffix"

  echo $branch_name
}

# appears before the status
__prompt__git_status__prefix=""
# appears after the status
__prompt__git_status__suffix=""
# clean repo status display
__prompt__git_status__clean="%F{green}✓%f"
# untracked files status display
__prompt__git_status__untracked="%B%F{red}?%f%b"
# unstaged changes status display
__prompt__git_status__unstaged="%B%F{red}*%f%b"
# uncommitted changes status display
__prompt__git_status__uncommitted="%B%F{red}!%f%b"

function __prompt__git_status {
  local git_status

  if ! git diff --quiet --exit-code; then
    git_status="$git_status$__prompt__git_status__unstaged"
  fi

  if ! git diff --cached --quiet --exit-code; then
    git_status="$git_status$__prompt__git_status__uncommitted"
  fi

  if [[ ! -z "$(git ls-files --others --exclude-standard --directory --no-empty-directory)" ]]; then
    git_status="$git_status$__prompt__git_status__untracked"
  fi

  if [[ -z "$git_status" ]]; then
    git_status="$__prompt__git_status__clean"
  fi

  git_status="$__prompt__git_status__prefix$git_status$__prompt__git_status__suffix"

  echo $git_status
}

# appears before the short sha1
__prompt__git_short_sha__prefix="%F{yellow}@"
# appears after the short sha1
__prompt__git_short_sha__suffix="%f"

function __prompt__git_short_sha {
  if git rev-parse --short HEAD >/dev/null 2>&1; then
    local short_sha

    short_sha="$short_sha$__prompt__git_short_sha__prefix"
    short_sha="$short_sha$(git rev-parse --short HEAD)"
    short_sha="$short_sha$__prompt__git_short_sha__suffix"

    echo $short_sha
  fi
}

# appears before git info
__prompt__git_info__prefix=" on %F{yellow}±%f"
# appears after git info
__prompt__git_info__suffix=""
# ahead status
__prompt__git_info__ahead="%F{magenta}⇡%f"
# behind status
__prompt__git_info__behind="%F{magenta}⇣%f"

function __prompt__git_info {
  if git rev-parse 2>/dev/null; then
    local git_info

    git_info="$git_info$__prompt__git_info__prefix"
    git_info="$git_info$(__prompt__git_branch_name)"
    git_info="$git_info$(__prompt__git_short_sha)"
    git_info="$git_info%F{yellow}(%f$(__prompt__git_status)%F{yellow})%f"
    git_info="$git_info$__prompt__git_info__suffix"

    echo $git_info
  fi
}

#-- Prompts --------------------------------------------------------------------

__prompt__newline=$'\n'
# last 5 segments of cwd from ~
__prompt__cwd="%F{blue}%5~%f"
# exit status of the previous command if non-zero
__prompt__exit_status="%(?..%F{red}%?%f )"
# prompt symbol, green=normal, red=privileged
__prompt__prompt_symbol="%(!.%B%F{red}$%f%b.%F{green}❯%f)"

PROMPT='$__prompt__cwd$(__prompt__git_info)$__prompt__newline$__prompt__exit_status$__prompt__prompt_symbol '

RPROMPT=''
