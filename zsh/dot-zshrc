#==============================================================================#
# options documentation:                                                       #
#     http://tinyurl.com/msuawhd                                               #
#==============================================================================#

#-- Changing Directories -------------------------------------------------------

# none

#-- Completion -----------------------------------------------------------------

# make the completion list smaller by using columns with different widths
setopt list_packed

#-- Expansion and Globbing -----------------------------------------------------

# none

#-- History --------------------------------------------------------------------

# set the location of the history file
HISTFILE="$HOME/.zsh_history"
# the maximum number of events stored in the internal history list
HISTSIZE=5000
# the maximum number of history events to save in the history file
SAVEHIST=5000
# add commands to history as soon as they're entered rather than on shell exit
setopt inc_append_history
# do not enter duplicate commands
setopt hist_ignore_dups
# do not enter commands into the history if they begin with a space
setopt hist_ignore_space

#-- Initialization -------------------------------------------------------------

# none

#-- Input / Output -------------------------------------------------------------

setopt correct

#-- Job Control ----------------------------------------------------------------

# none

#-- Prompting ------------------------------------------------------------------

setopt prompt_subst

#-- Scripts and Functions ------------------------------------------------------

# none

#-- Shell Emulation ------------------------------------------------------------

# none

#-- Shell State ----------------------------------------------------------------

# none

#-- ZLE ------------------------------------------------------------------------

# enable vi emulation
bindkey -v
# rebind backward history search
bindkey "^R" history-incremental-search-backward

#==============================================================================#
# miscellaneous                                                                #
#==============================================================================#

#-- compinstall ----------------------------------------------------------------

autoload -Uz compinit
compinit

#-- color ----------------------------------------------------------------------

autoload -U colors
colors

#==============================================================================#
# sources                                                                      #
#==============================================================================#

# load private zshrc
test -e "$HOME/.private/zshrc" && source "$HOME/.private/zshrc"

# load exports and aliases
source "$HOME/.exports"
source "$HOME/.aliases"

# load private exports and aliases
test -e "$HOME/.private/exports" && source "$HOME/.private/exports"
test -e "$HOME/.private/aliases" && source "$HOME/.private/aliases"

source "$HOME/.zsh-prompt"

#==============================================================================#
# prompt                                                                       #
#==============================================================================#

function _precmd_git_branch() {
    local branch=$(git symbolic-ref -q --short HEAD 2>/dev/null)
    test -n "$branch" && printf "%s" "%F{yellow}$branch%f"
}

function _precmd_git_commit() {
    local commit=$(git rev-parse --short HEAD 2>/dev/null)
    test -n "$commit" && printf "%s" "%F{yellow}$commit%f"
}

function _precmd_git_untracked() {
    test -n "$(git ls-files --others --exclude-standard --directory --no-empty-directory)" && printf "%s" "%F{red}?%f"
}

function _precmd_git_unstaged() {
    test -n "$(git ls-files --modified --exclude-standard)" && printf "%s" "%F{red}*%f"
}

function _precmd_git_uncommitted() {
    # this will exit with a code of 1 if there are uncommitted changes
    git diff --cached --quiet --exit-code || printf "%s" "%F{red}!%f"
}

function _precmd_git_info() {
    if git rev-parse 2>/dev/null; then
        local separator="%F{yellow}@%f"
        local git_branch=$(_precmd_git_branch)
        local git_commit=$(_precmd_git_commit)
        local git_info
        if test -n "$git_branch" && test -n "$git_commit"; then
            git_info="$git_branch$separator$git_commit"
        else
            git_info="$git_branch$git_commit"
        fi

        local git_status
        git_status="$git_status$(_precmd_git_untracked)"
        git_status="$git_status$(_precmd_git_unstaged)"
        git_status="$git_status$(_precmd_git_uncommitted)"
        test -n "$git_status" && git_status="%F{yellow}[%f$git_status%F{yellow}]%f"

        local prefix="%F{yellow}git:%f"
        printf "%s" "$prefix$git_info$git_status"
    fi
}

function precmd() {
    local cwd="%F{blue}%5~%f"
    local git_info="$(_precmd_git_info)"
    local info_line="$cwd"
    test -n "$git_info" && info_line="$info_line $git_info"

    local exit_code="%(?..%B%F{red}%?%f%b )"
    local prompt_symbol="%(!.%B%F{red}#>%f%b.%B%F{green}>%f%b "
    local prompt_line="$exit_code$prompt_symbol"

    local newline
    newline=$'\n'

    PS1="$newline$info_line$newline$prompt_line"
}
